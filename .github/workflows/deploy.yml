name: Deploy Weather App to AWS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    env:
      AWS_DEFAULT_REGION: 'ap-southeast-1'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Initialise env variables
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "VITE_OPEN_WEATHER_API_KEY=${{ secrets.VITE_OPEN_WEATHER_API_KEY_PROD }}" >> envs/.env
          else
            echo "Invalid branch for deployment. Deployment ending now."
            exit 0
          fi

      - name: Lint and Build Project
        run: yarn build

      - name: Determine Deployment Environment and Variables
        id: set-env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "AWS_HOST=${{ secrets.AWS_PROD_HOST }}" >> $GITHUB_ENV
            echo "AWS_USER=${{ secrets.AWS_PROD_USER }}" >> $GITHUB_ENV
            echo "AWS_SECURITY_GROUP_ID=${{ secrets.AWS_SECURITY_GROUP_ID }}" >> $GITHUB_ENV
          else
            echo "Invalid branch for deployment. Deployment ending now."
            exit 0
          fi

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.OPENSSH_PEM }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: ${{ secrets.AWS_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Add IP to EC2 security group
        uses: twosense/add-ip-to-ec2-security-group@v1
        with:
          security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
          port: 22
          ip: ${{ steps.ip.outputs.ipv4 }}

      - name: Add IP address to security group
        run: |
          aws ec2 authorize-security-group-ingress --group-name $AWS_SECURITY_GROUP_ID --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to AWS
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" dist/* $AWS_USER@$AWS_HOST:/usr/share/nginx/html/weather-app/
          fi
          rm -f private_key.pem

      - name: Remove IP address from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-name $AWS_SECURITY_GROUP_ID --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        if: always()

      - name: Clean up
        run: |
          rm -f private_key.pem
          rm -rf envs
        if: always()
